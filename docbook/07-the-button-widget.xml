<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
<chapter>
  
  <title>The Button Widget</title>

  <sect1>
    
    <title>Normal Buttons</title>

    <para>We've almost seen all there is to see of the button widget. It's 
      pretty simple. There is however more than one way to create a button. 
      This is facilitated by Vala's support for <emphasis>named 
      constructors</emphasis>.</para>

    <para>The first is </para>

<programlisting language="vala">
  Gtk.Button.with_label(string label)
</programlisting> 

    <para>which creates an instance of the <classname>Gtk.Button</classname> 
      widget with a <classname>Gtk.Label</classname> child containing the text 
      passed to the constructor as the <varname>label</varname> argument.</para>

    <para>We also have </para>

<programlisting language="vala">
  Gtk.Button.with_mnemonic(string label);
</programlisting>

    <para>which creates a new <classname>Button</classname> containing a 
      <classname>Label</classname>. In this case, any characters in the label 
      that are preceded by an underscore are underlined. The first underlined 
      character represents a keyboard accelerator called a 
      <emphasis>mnemonic</emphasis>. Pressing <command>Alt</command> and that 
      key activates the button. If you wish to have a literal underscore 
      character in the label, you need to use two underscores ('__').</para>

    <para>Another constructor is </para>

<programlisting language="vala">
  Gtk.Button.from_stock(string stock_id);
</programlisting> 
    
    <para>and it creates a button containing the image and text from a stock 
      item. Stock items represent commonly used menu or toolbar items such as 
      "Open" or "Exit". Each stock item is identified by a stock ID; stock IDs 
      are just strings, but named constants such as <constant>Gtk.Stock.OPEN</constant>, 
      <constant>Gtk.Stock.OK</constant>, etc. are provided to avoid typing 
      mistakes in the strings.</para>
    
    <para>Finally, we have</para>

<programlisting language="vala">
  Gtk.Button.new();
</programlisting> 
    
    <para>which creates a blank button. It's then up to you to pack a label or 
      pixmap into this new button. To do this, create a new box, and then pack 
      your objects into this box using the usual <function>Gtk.Box.pack_start()</function>, 
      and then use <function>Gtk.Container.add()</function> to pack the box into 
      the button.</para>
    <sect2>
      <title>A Simple Button Example</title>
    
      <para>Here's an example of using <function>Gtk.Button.new()</function> to 
        create a button with an image and a label in it. I've broken up the code 
        to create a box from the rest so you can use it in your programs. There 
        are further examples of using images later in the tutorial.</para>

      <figure id="buttons-1">
        <title>A Simple Button</title>
        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/screenshots/chapter_07/01_button.png" 
                         format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>A Simple Button</phrase>
            </textobject>
          </mediaobject>
        </screenshot>
      </figure>

<programlisting language="vala" linenumbering="numbered">

/* Create a new hbox with an image and a label packed into it
 * and return the box. */
static Gtk.Box xpm_label_box(string xpm_filename, string label_text ) {
  
  /* Create box for image and label */
  var box = new Gtk.Box(Gtk.Orientation.HORIZONTAL, 0);
  box.set_homogeneous(false);
  box.set_border_width(2);

  /* Now on to the image stuff */
  var image = new Gtk.Image.from_file(xpm_filename);

  /* Create a label for the button */
  var label = new Gtk.Label(label_text);

  /* Pack the image and label into the box */
  box.pack_start(image, false, false, 3);
  box.pack_start(label, false, false, 3);

  image.show();
  label.show();

  return box;
}

class ButtonWindow {
  
  Gtk.Window window;
  Gtk.Button button;
  Gtk.Box box;

  /* Our usual callback function */
  void callback (string data) {
    stdout.printf("Hello again - %s was pressed\n", data);
  }

  public ButtonWindow () {

    /* Create a new window. */
    this.window = new Gtk.Window(Gtk.WindowType.TOPLEVEL);

    this.window.set_title("Pixmap'd Buttons!");

    /* It's a good idea to do this for all windows. */
    this.window.destroy.connect( ()=> { Gtk.main_quit(); } );

    this.window.delete_event.connect( ()=> { return false; } );

    /* Sets the border width of the window. */
    this.window.set_border_width(10);

    /* Create a new button. */
    this.button = new Gtk.Button();

    /* Connect the "clicked" signal of the button to our callback. */
    this.button.clicked.connect( ()=> { this.callback("cool button"); });

    /* This calls our box creating function. */
    this.box = xpm_label_box("icon.png", "cool button");

    /* Pack and show all our widgets. */
    this.box.show();

    this.button.add(box);

    this.button.show();

    this.window.add(button);

    this.window.show();
    
  }
  
  public static int main (string[] args) {
    
    Gtk.init(ref args);
    new ButtonWindow();
    
    /* Rest in gtk_main and wait for the fun to begin! */
    Gtk.main ();
    
    return 0;
  }

}

</programlisting>
    </sect2>
  </sect1>

  <sect1>

    <title>Toggle Buttons</title>

    <para>A <classname>Gtk.ToggleButton</classname> is a <classname>Gtk.Button</classname> 
      which will remain 'pressed-in' when clicked, and return to its previous 
      state when clicked again. Toggle buttons are derived from normal buttons 
      and are very similar, except they will always be in one of two states, 
      changing from one to the other when clicked. If a 
      <classname>Gtk.ToggleButton</classname> is depressed (in the 'active' 
      state) and you click it, it will pop back up (become 'inactive'). Click 
      again, and it will pop back down.</para>

    <para>Toggle buttons are the basis for check buttons and radio buttons, as 
      such, many of the calls used for toggle buttons are inherited by radio and 
      check buttons. We will highlight these when we come accross them.</para>

    <para>To create a new toggle button, you'd use one of these constructors:</para>

<programlisting language="vala">
  Gtk.ToggleButton ();
</programlisting>

<programlisting language="vala">
  Gtk.ToggleButton.with_label (string label);
</programlisting>

<programlisting language="vala">
  Gtk.ToggleButton.with_mnemonic (string label);
</programlisting>

    <para>As you can imagine, these work identically to the normal 
      <classname>Gtk.Button</classname> widget constructors we saw in the 
      previous section. The first creates a blank toggle button, and the last 
      two, a button with a label widget already packed into it. The 
      <function>_mnemonic()</function> variant additionally parses the label 
      for '_'-prefixed mnemonic characters.</para>

    <para>To retrieve the state of the toggle widget, including radio and check 
      buttons, we use the following method:</para>

<programlisting>
  bool Gtk.ToggleButton.get_active();
</programlisting>
    
    <para>This returns the current state of the toggle button as a boolean 
      <constant>true</constant>/<constant>false</constant> value.</para>

    <para>To force the state of a toggle button, and its children, the radio and 
      check buttons, use this function:</para>

<programlisting>
  Gtk.ToggleButton.set_active(bool is_active);
</programlisting>

    <para>The above call can be used to set the state of the toggle button, and 
      its children the radio and check buttons. When called on a 
      <classname>Gtk.ToggleButton</classname> instance and passed a 
      <constant>true</constant> boolean, it is set to active (depressed). If 
      passed <constant>false</constant>, the button is set to the inactive 
      state.</para>

    <para>Note that when you use the <function>Gtk.ToggleButton.set_active()</function> 
      method, and the state is actually changed, it causes the "clicked" and 
      "toggled" signals to be emitted from the button.</para>

  </sect1>

  <sect1>

    <title>Check Buttons</title>
    
    <para>Check buttons inherit many properties and functions from the the 
      toggle buttons above, but look a little different. Rather than being 
      buttons with text inside them, they are small squares with the text to the 
      right of them. These are often used for toggling options on and off in 
      applications.</para>

    <para>The constructors are similar to those of the normal button.</para>

<programlisting language="vala">
  Gtk.CheckButton ();
</programlisting>

<programlisting language="vala">
  Gtk.CheckButton.with_label (string label);
</programlisting>

<programlisting language="vala">
  Gtk.CheckButton.with_mnemonic (string label);
</programlisting>


    <para>The <function>Gtk.CheckButton.with_label(label)</function> function 
      creates a check button with a label beside it.</para>

    <para>Checking the state of the check button is identical to that of the 
      toggle button.</para>

  </sect1>

  <sect1>
    
    <title>Radio Buttons</title>

    <para>Radio buttons are similar to check buttons except they are grouped so 
      that only one may be selected/depressed at a time. This is good for places 
      in your application where you need to select from a short list of 
      options.</para>

    <para>Creating a new radio button is done with one of these calls:</para>
    <para>The constructor.</para>
<programlisting language="vala">
  public RadioButton (SList&lt;RadioButton&gt;? group)
</programlisting>
      <para>Creates a new RadioButton.</para>


  
  </sect1>


</chapter>