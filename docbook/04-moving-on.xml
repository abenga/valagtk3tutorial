<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
<chapter>

  <title>Moving On</title>

  <sect1>

    <title>Vala Data Types</title>

    <para>Vala supports four kinds of data types: value types, reference types, 
        parametrized types, and pointer types. Value types include simple types 
        (e.g. <type>char</type>, <type>int</type>, and <type>float</type>), enum 
        types, and struct types. Reference types include object types, array 
        types, delegate types, and error types.</para>
    <sect2>
        
        <title>Value Types</title>
        
        <para>Value types differ from reference types in that instances of value 
            types are stored directly in variables or fields that represent them. 
            Whenever a value type instance is assigned to another variable or field, 
            the default action is to duplicate the value, such that each identifier 
            refers to a unique copy of the data, over which it has ownership. When 
            a value type is instantiated in a method, the instance is created on the 
            stack.</para>
        
        <para>Value types include the boolean type, integral types, the floating-point 
            types, and enumerated types.</para>
        
        <para>The boolean type, <type>bool</type>, can have values of 
            <token>true</token> or <token>false</token>.</para>
        
        <para>Integral types can contain only integers. They are either signed or 
            unsigned, each of which is considered a different type, though it is 
            possible to cast between them when needed. Some types define exactly 
            how many bits of storage are used to represent the integer e.g. 
            <type>uint8</type>, <type>int64</type>, etc. Others depend on the 
            environment, for example <type>long</type>, <type>int</type>, 
            <type>short</type> map to C data types and therefore depend on the 
            machine architecture. A <type>char</type> is 1 byte wide and can 
            represent one of 256 values. A <type>unichar</type> is 4 bytes wide, 
            i.e. large enough to store any UTF-8 character.</para>
        
        <para>Floating point types are used to represent contain irrational 
            floating point numbers in a fixed number of bits. There are two 
            floating point types: <type>float</type> and <type>double</type>.</para>
        
        <para>An enumerated type is one in which all possible values that 
            instances of the type can hold are declared with the type.</para>

    </sect2>
    <sect2>
        <title>Reference Types</title>
        <para>Variables of reference types contain references to the instances, 
            rather than the instances themselves. Assinging an instance of a 
            reference type to a variable or field will not make a copy of the 
            data, instead only the reference to the data is copied. This means 
            that both variables will refer to the same data, and so changes made 
            to that data using one of the references will be visible when using 
            the other. Instances of reference types are always stored on the 
            heap (the part of memory that is dynamically allocated during a 
            program's run time). </para>

        <para>When a variable that is an instance of a reference variable 
            goes out of scope, the fact that a reference to the instance has been 
            removed is also recorded. This means that a reference variable can be 
            automatically removed from memory when it is no longer needed. </para>

        <para>Reference types include classes, arrays, delegates, errors and  
            strings.</para>
        
        <para>A class definition introduces a new reference type - this is the 
            most common way of creating a new type in Vala. A class is definition 
            of a new data type. A class can contain fields, constants, methods, 
            properties, and signals. Class types support inheritance, a 
            mechanism whereby a derived class can extend and specialize a base 
            class. Vala supports three different types of classes, namely:</para>
        <itemizedlist>
            <listitem><para>GObject subclasses, which inherit directly from 
                <classname>GLib.Object</classname>, and are the most powerful 
                type of class.</para></listitem>
            <listitem><para>Fundamental GType classes are those either without 
                any superclass or that don't inherit at any level from 
                <classname>GLib.Object</classname>. These classes support 
                inheritence, interfaces, virtual methods, reference counting, 
                unmanaged properties, and private fields. They are instantiated 
                faster than GObject subclasses but are less 
                powerful.</para></listitem>
            <listitem><para>Compact classes, so called because they use less 
                memory per instance, are the least featured of all class types. 
                They are not registered with the GType system and do not support 
                reference counting, virtual methods, or private fields. Such 
                classes are very fast to instantiate but not massively useful 
                except when dealing with existing libraries. They are declared 
                using the <property>Compact</property> attribute on the 
                class.</para></listitem>
        </itemizedlist>

        <para>An array is a data structure that can contains zero or more 
            elements of the same type, up to a limit defined by the type.</para>

        <para>A delegate is a data structure that refers to a method. A method 
            executes in a given scope which is also stored, meaning that for 
            instance methods a delegate will contain also a reference to the 
            instance.</para>
        <para>Instances of error types represent recoverable runtime errors. All 
            errors are described using error domains, a type of enumerated value, 
            but errors themselves are not enumerated types.</para>

        <para>Vala has built in support for Unicode strings, via the fundamental 
            <type>string</type> type. This is the only fundamental type that is 
            a reference type. Like other fundamental types, it can be 
            instantiated with a literal expression. Strings are UTF-8 encoded 
            which means that they cannot be accessed like character arrays in C 
            since it is not guaranteed that each Unicode character will be 
            stored in just one byte. Instead, the string fundamental struct type 
            (which all strings are instances of) provides access methods along 
            with other tools.</para>
    </sect2>

    <sect2>
        
        <title>Parameterised types</title>
        
        <para>Vala allows definitions of types that can be customised at runtime 
            with type parameters. 
            For example, a list can be defined so that it can be instantiated as 
            a list of ints, a list of Objects, etc. This is achieved using 
            generic declarations.</para>

    </sect2>

    <sect2>
        
        <title>Pointer types</title>
        
        <para>The name of a type can be used to implicitly create a pointer type 
            related to that type. The value of a variable declared as being of 
            type <type>T*</type> represents the memory address of an instance of 
            type T. The instance is never made aware that its address has been 
            recorded, and so cannot record the fact that it is referred to in 
            this way.</para>
        
        <para>Instances of any type can be assigned to a variable that is 
            declared to be a pointer to an instance of that type. For referenced 
            types, direct assignment is allowed in either direction. For value 
            types the pointer-to operator &amp; is required to assign to a 
            pointer, and the pointer-indirection operator "*" is used to access 
            the instance pointed to.</para>
        
        <para>The <type>void*</type> type represents a pointer to an unknown type. 
            As the referred type is unknown, the indirection operator cannot be 
            applied to a pointer of type <type>void*</type>, nor can any 
            arithmetic be performed on such a pointer. However, a pointer of type 
            <type>void*</type> can be cast to any other pointer type 
            (and vice-versa) and compared to values of other pointer types.</para>
    
    </sect2>

    <sect2>
        <title>Nullable Types</title>
        
        <para>There is a further characterization of types, <emphasis>nullable 
            types</emphasis>. The name of a type can be used to implicitly 
            create a nullable type related to that type. An instance of a 
            nullable type <type>T?</type> can either be a value of type 
            <type>T</type> or <symbol>null</symbol>. A nullable type will have 
            either value or reference type semantics, depending on the type 
            it is based on.</para>

    </sect2>

  </sect1>
  
  <sect1>
    
    <title>An Upgraded Hello World</title>
    <para>Let us now take a look at a slightly improved <filename>helloworld</filename> 
        with better examples of callbacks. This will also introduce us to our next 
        topic, packing widgets.</para>
    <para>The following code is also contained in the 
        <filename>examples/chapter_04/01_upgradedhelloworld.vala</filename> file.</para>

<programlisting linenumbering="numbered">

using Gtk;

class HelloWorld2 {
  
  private Gtk.Window window;
  private Gtk.Button button1;
  private Gtk.Button button2;
  private Gtk.Box box;
  
  /* Our new improved callback.  The data passed to this function
   * is printed to stdout. */
  void callback(string data) {
    stdout.printf("Hello! - %s was pressed\n", data);
  }

  /* another callback */
  static bool delete_event() {
    Gtk.main_quit();
    return false;
  }
  
  public HelloWorld2 () {
    

    /* Create a new window */
    this.window = new Gtk.Window();

    /* This is a new call, which just sets the title of our
     * new window to "Hello Buttons!" */
    this.window.set_title("Hello Buttons!");

    /* Here we just set a handler for delete_event that immediately
     * exits GTK. */
    this.window.delete_event.connect(this.delete_event);

    /* Sets the border width of the window. */
    this.window.set_border_width(10);

    /* We create a box to pack widgets into.  This is described in detail
     * in the "packing" section. The box is not really visible, it
     * is just used as a tool to arrange widgets. */
    box = new Gtk.Box(Gtk.Orientation.HORIZONTAL, 0);

    /* Put the box into the main window. */
    this.window.add(box);

    /* Creates a new button with the label "Button 1". */
    this.button1 = new Gtk.Button.with_label("Button 1");
    
    /* Now when the button is clicked, we call the "callback" function
     * with a pointer to "button 1" as its argument */
    this.button1.clicked.connect (() => { this.callback("Button 1"); });  

    /* Instead of gtk_container_add, we pack this button into the invisible
     * box, which has been packed into the window. */
    box.pack_start(button1, true, true, 0);

    /* Always remember this step, this tells GTK that our preparation for
     * this button is complete, and it can now be displayed. */
    button1.show();

    /* Do these same steps again to create a second button */
    button2 = new Gtk.Button.with_label("Button 2");

    /* Call the same callback function with a different argument,
       passing a pointer to "button 2" instead. */
    this.button2.clicked.connect (() => { this.callback("Button 2"); }); 

    box.pack_start(button2, true, true, 0);

    /* The order in which we show the buttons is not really important, but I
     * recommend showing the window last, so it all pops up at once. */
    button2.show();

    box.show();

    window.show();
    
  }
  
  public static int main (string[] args) {
    /* This is called in all GTK applications. Arguments are parsed
     * from the command line and are returned to the application. */
    Gtk.init (ref args);
    
    var hello = new HelloWorld2();
    
    /* Rest in gtk_main and wait for the fun to begin! */
    Gtk.main();
    
    return 0;
  }  
}

</programlisting>
    
    <para>Compiling and running the code produces the window below, 
        <emphasis>"Upgraded Hello World Example"</emphasis>.</para>

<figure id="upgraded-hello-world-window">
  <title>Upgraded Hello World Example</title>
  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/screenshots/chapter_04/01_upgradedhelloworld.png" 
                   format="PNG"/>
      </imageobject>
      <textobject>
        <phrase>Upgraded Hello World Example</phrase>
      </textobject>
    </mediaobject>
  </screenshot>
</figure>

    <para>You'll notice this time there is no way to exit the program except to 
        use your window manager or command line to kill it. A good exercise for 
        the reader would be to insert a third "Quit" button that will exit the 
        program. You may also wish to play with the options to 
        <function>pack_start()</function> while reading the next section. Try 
        resizing the window, and observe the behavior.</para>

    <para>A short commentary on the code differences from the first 
        <emphasis>Hello World</emphasis> program is  in order.</para>

    <para>As noted above there is no "destroy" event handler in the upgraded 
        <emphasis>Hello World</emphasis>.</para>

    <para>Lines 13-15 define a callback method which is similar to the 
        <function>hello()</function> callback in the first helloworld. The 
        difference is that the callback prints a message including data passed 
        in.</para>
    
    <para>Line 31 sets a title string to be used on the titlebar of the window, 
        as seen in the screenshot above.</para>
    
    <para>Line 43 creates a horizontal box (<classname>Gtk.Box</classname>) to 
        hold the two buttons that are created in lines 48 and 64. Line 46 adds 
        the horizontal box to the window container.</para>

    <para>Lines 53 and 68 connect the <classname>callback()</classname> method 
        to the "clicked" signal of the buttons. Each button sets up a different 
        string to be passed to the <function>callback()</function> method when 
        invoked.</para>

    <para>Lines 57 and 70 pack the buttons into the horizontal box. Lines 61 and 
        74 ask GTK to display the buttons.</para>

    <para>Lines 76 and 78 ask GTK to display the box and the window 
        respectively.</para>

  </sect1>

</chapter>
